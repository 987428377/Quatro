# Velodyne-64-HDE, VLP-16, HDL-32E, Ouster-OS1-16, Ouster-OS1-64
Lidar_type: Velodyne-64-HDE

ground_segmentation_mode: Patchwork   # LeGO-LOAM , Patchwork
# 4Neighbor, 8Neighbor, 4CrossNeighbor
# 4Neighbor is the original sub-clustering method, but we empirically found that 
# comparing 4 pixels located on the diagonal way is effective when Patchwork is employed as preprocessing
neigbor_mode: 4CrossNeighbor 

# Extrinsics (Raw lidar coordinate -> Coordinate that is parallel to the X-Y plane of ground)
# But, not in use
extrinsic_trans: [0.0, 0.0, 0.0]
extrinsic_rot: [1, 0, 0,
               0, 1, 0,
               0, 0, 1]

# We empirically found that w/o voxelization rather degrades the matching performance!
# For Velodyne 16 Puck (NAVER LABS Loc dataset),
# voxel_size - 0.1, normal_radius - 0.3, fpfh_radius - 0.45
# For Velodyne 64 HDE (KITTI dataset),
# voxel_size - 0.3, normal_radius - 0.5, fpfh_radius - 0.75
voxel_size: 0.3
FPFH:
    normal_radius: 0.5
    fpfh_radius: 0.75 # `fpfh_radius` should satisfy the following condition: `fpfh_radius` >= 1.5 * `normal_radius`
                   
Quatro:
    estimating_scale: false
    # The magnitude of uncertainty of measurements
    # Let v be the voxel size, we empirically found that the best `noise_bound` is within the range over v / 2 ~ v for a 3D point cloud
    noise_bound: 0.3
    # `noise_bound_coeff` plays a role as an uncertainty multiplier and is used when estimating COTE. 
    # I.e. final noise bound is set to `noise_bound` * `noise_bound_coeff`
    noise_bound_coeff: 1.0    
    rotation:
        # Num. max iter for the rotation estimation.
        # Usually, rotation estimation converges within < 20 iterations
        num_max_iter: 50
        # Control the magnitue of the increase in non-linearity. In case of TLS, usually `gnc_factor` is set to 1.4
        # The larger the value, the steeper the increase in nonlinearity.
        gnc_factor: 1.4
        # The cost threshold is compared with the difference between costs of consecutive iterations.
        # Once the diff. of cost < `rot_cost_diff_thr`, then the optimization is finished.
        rot_cost_diff_thr: 0.00011
    
    
    


